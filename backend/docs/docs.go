// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/admin/payment-history": {
            "get": {
                "description": "Retrieves the payment history for all users. Admin can view all payments made by users.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get payment history for all users (admin only)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of all payment histories",
                        "schema": {
                            "$ref": "#/definitions/controllers.GetPaymentHistoryResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error while fetching payment history",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/admin/payment-history/{user_id}": {
            "get": {
                "description": "Retrieves the payment history of a specific user based on the provided user ID. This endpoint is restricted to admin access only and returns a list of payment transactions associated with the user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Retrieve payment history for a specific user (admin access only)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of payment transactions for the user",
                        "schema": {
                            "$ref": "#/definitions/controllers.GetPaymentHistoryResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID or missing parameters",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "No payment history found for this user",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during payment history retrieval",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/admin/user/{user_id}": {
            "get": {
                "description": "Admin can retrieve user details by providing the user ID. Returns user information such as username, email, VIP level, etc.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get user details by admin",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User details successfully fetched",
                        "schema": {
                            "$ref": "#/definitions/models.UserDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error while fetching user",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Admin can delete a user from the system by providing the user ID. The user will be permanently removed from the database.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Delete a user by admin",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/models.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error while deleting user",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/admin/user/{user_id}/active": {
            "put": {
                "description": "Activate a user account by setting the account status to active. Admin can use this to activate a banned account.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Activate a user account",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Account activated successfully",
                        "schema": {
                            "$ref": "#/definitions/models.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID or missing user ID",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error while activating account",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/admin/user/{user_id}/ban": {
            "put": {
                "description": "Ban a user account by setting the account status to inactive. Admin can use this to ban a user account.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Ban a user account",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Account banned successfully",
                        "schema": {
                            "$ref": "#/definitions/models.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID or missing user ID",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error while banning account",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/admin/users": {
            "get": {
                "description": "Admin can retrieve a list of all users in the system. Returns basic information about each user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get all users",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of users successfully fetched",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/controllers.User"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error while fetching users",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/funding-rate": {
            "get": {
                "description": "Retrieves current funding rate information for a specified trading pair from Binance Futures",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Funding Rate"
                ],
                "summary": "Get real-time funding rate data",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"QTUMUSDT\"",
                        "description": "Trading pair symbol (e.g., QTUMUSDT)",
                        "name": "symbol",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response with funding rate data",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_price-service_models.ResponseFundingRate"
                        }
                    },
                    "400": {
                        "description": "Invalid symbol or request parameters",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponseDataMissing"
                        }
                    },
                    "404": {
                        "description": "Symbol not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponseDataNotFound"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponseDataInternalServerError"
                        }
                    }
                }
            }
        },
        "/api/v1/future-price": {
            "get": {
                "description": "Retrieves current future price information for a specified trading pair from Binance Futures",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Future price"
                ],
                "summary": "Get real-time future price data",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"BTCUSDT\"",
                        "description": "Trading pair symbol (e.g., BTCUSDT)",
                        "name": "symbol",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response with funding rate data",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseFuturePrice"
                        }
                    },
                    "400": {
                        "description": "Invalid symbol or request parameters",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponseDataMissing"
                        }
                    },
                    "404": {
                        "description": "Symbol not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponseDataNotFound"
                        }
                    },
                    "500": {
                        "description": "Failed to fetch price",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponseDataInternalServerError"
                        }
                    }
                }
            }
        },
        "/api/v1/payment/momo-callback": {
            "post": {
                "description": "Handles callback from MoMo after payment is made",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payment"
                ],
                "summary": "MoMo Payment Callback",
                "parameters": [
                    {
                        "description": "MoMo Callback Data",
                        "name": "callbackData",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "MoMo callback success response",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON payload",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid signature",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/payment/status": {
            "post": {
                "description": "Queries the payment status and upgrades the user's VIP level if the payment is successful based on the order details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payment"
                ],
                "summary": "Check payment status and upgrade user's VIP level if successful",
                "parameters": [
                    {
                        "description": "Order ID from the payment gateway",
                        "name": "statusRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.QueryPaymentRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Payment confirmed and VIP level upgraded",
                        "schema": {
                            "$ref": "#/definitions/controllers.ReponseQueryPaymentRequest"
                        }
                    },
                    "400": {
                        "description": "Invalid order ID or missing parameters",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Order not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during payment confirmation",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/payment/vip-upgrade": {
            "post": {
                "description": "Creates a MoMo payment request for upgrading the user's VIP level, validates the token, and stores the order details in the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payment"
                ],
                "summary": "Initiate MoMo payment for VIP upgrade",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Payment request data",
                        "name": "paymentRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.CreateVIPPaymentRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Payment URL and Order ID",
                        "schema": {
                            "$ref": "#/definitions/controllers.CreateVIPPaymentReponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request data or missing parameters",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Invalid or missing authorization token",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during payment creation",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/spot-price": {
            "get": {
                "description": "Retrieves current spot price information for a specified trading pair from Binance Spot",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Spot price"
                ],
                "summary": "Get real-time spot price data",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"BTCUSDT\"",
                        "description": "Trading pair symbol (e.g., BTCUSDT)",
                        "name": "symbol",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response with spot price data",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseSpotPrice"
                        }
                    },
                    "400": {
                        "description": "Invalid symbol or request parameters",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponseDataMissing"
                        }
                    },
                    "404": {
                        "description": "Symbol not found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponseDataNotFound"
                        }
                    },
                    "500": {
                        "description": "Failed to fetch price",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponseDataInternalServerError"
                        }
                    }
                }
            }
        },
        "/api/v1/user/me": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint fetches details of the currently authenticated user using the JWT token provided in the Authorization header.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Retrieve current user information",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer \u003cJWT Token\u003e",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success: Returns the user's details",
                        "schema": {
                            "$ref": "#/definitions/models.UserDTO"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid user ID",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: invalid token",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found: User not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error: Failed to fetch user",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint allows the user to update their profile information such as name, username, phone, avatar, bio, and date of birth.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update current user profile",
                "parameters": [
                    {
                        "type": "string",
                        "format": "\"Bearer {token}\"",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Update UserProfile Request body",
                        "name": "UpdateUserProfileRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.UpdateUserProfileRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.UpdateUserProfileResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid input",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Authorization header required or invalid token",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found: User not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error: Failed to update user",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "This endpoint allows the user to Delete the account of the currently authenticated user based on the access token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Delete current user account",
                "parameters": [
                    {
                        "type": "string",
                        "format": "\"Bearer {token}\"",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.DeleteResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized or token is invalid",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to delete user",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/user/me/change_email": {
            "put": {
                "description": "This endpoint allows an authenticated user to change their email address.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Change user email",
                "parameters": [
                    {
                        "type": "string",
                        "format": "\"Bearer {token}\"",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Change Mail Request body",
                        "name": "ChangeMailRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.ChangeMailRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.ChangeMailResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid email format",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized or token is invalid",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Email already exists",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/user/me/change_password": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint allows an authenticated user to change their password by providing the current and new passwords.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Change user password",
                "parameters": [
                    {
                        "type": "string",
                        "format": "\"Bearer {token}\"",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Change Password Request body",
                        "name": "ChangePasswordRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.ChangePasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.ChangePasswordResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Password must contain at least 8 characters, including letters, numbers, and special characters.",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Current password is incorrect",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found: User not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/user/me/payment-history": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "This endpoint returns the payment history of the currently authenticated user using their JWT token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Retrieve payment history",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer \u003cJWT Token\u003e",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success: Returns the user's payment history",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "additionalProperties": true
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Invalid or missing token",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error: Failed to fetch payment history",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/users/{id}/alerts": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve all alerts for a user by their ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get user alerts",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of user alerts",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseUserAlerts"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_trigger-service_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve alerts",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_trigger-service_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/users/{id}/alerts/notify": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Send a notification email to the user for their alerts",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Notify user of alerts",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Notification sent successfully",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseNotificationSent"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_trigger-service_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to send notification",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_trigger-service_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/vip1/kline": {
            "get": {
                "description": "Fetches Kline data for a specific symbol and interval from Binance API",
                "tags": [
                    "Kline"
                ],
                "summary": "Get Kline data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Symbol for which to fetch Kline data (e.g., BTCUSDT)",
                        "name": "symbol",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Interval for Kline data (e.g., 1m, 5m, 1h, 1d)",
                        "name": "interval",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response with Kline data",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseKline"
                        }
                    },
                    "400": {
                        "description": "Missing Data",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponseInputMissing"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponseDataInternalServerError"
                        }
                    }
                }
            }
        },
        "/api/v1/vip2/alerts": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve all alerts, optionally filter by type",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Alerts"
                ],
                "summary": "Get all alerts",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Filter by alert type (e.g., new_listing, delisting)",
                        "name": "type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of alerts",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.ResponseAlertList"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_trigger-service_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve alerts",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_trigger-service_models.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new alert with the given details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Alerts"
                ],
                "summary": "Create an alert",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Alert details",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Alert"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created alert",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseAlertCreated"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_trigger-service_models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_trigger-service_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to create alert",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_trigger-service_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/vip2/alerts/symbol": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Set a new alert for symbols that are newly listed or delisted",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Alerts"
                ],
                "summary": "Set an alert for new or delisted symbols",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Alert details",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Alert"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created alert for symbol",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseSetSymbolAlert"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_trigger-service_models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_trigger-service_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to create alert for symbol",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_trigger-service_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/vip2/alerts/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve an alert by its unique identifier",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Alerts"
                ],
                "summary": "Get an alert by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Alert ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Alert details",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseAlertDetail"
                        }
                    },
                    "400": {
                        "description": "Invalid alert ID",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_trigger-service_models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_trigger-service_models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Alert not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_trigger-service_models.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete an alert by its unique identifier",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Alerts"
                ],
                "summary": "Delete an alert",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Alert ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Alert deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseAlertDeleted"
                        }
                    },
                    "400": {
                        "description": "Invalid alert ID",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_trigger-service_models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_trigger-service_models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Alert not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_trigger-service_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/vip2/start-alert-checker": {
            "post": {
                "description": "Starts the alert checker to monitor for alerts",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Alert Running"
                ],
                "summary": "Start alert checker",
                "responses": {
                    "200": {
                        "description": "Alert checker started successfully",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseAlertCheckerStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_trigger-service_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/vip2/stop-alert-checker": {
            "post": {
                "description": "Stops the alert checker from monitoring for alerts",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Alert Running"
                ],
                "summary": "Stop alert checker",
                "responses": {
                    "200": {
                        "description": "Alert checker stopped successfully",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseAlertCheckerStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_trigger-service_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/vip2/symbols-alerts": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve new and delisted symbols from Binance",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Alerts"
                ],
                "summary": "Get new and delisted symbols",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of new and delisted symbols",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseNewDelistedSymbols"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_trigger-service_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve symbols",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_trigger-service_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/vip3/indicators": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create an alert with the given indicator type and settings",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Indicators"
                ],
                "summary": "Create an advanced indicator alert",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Indicator alert details",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Indicator"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Indicator alert created successfully",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseIndicatorCreated"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or invalid indicator type",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_trigger-service_models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_trigger-service_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to create indicator alert",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_trigger-service_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/forgot-password": {
            "post": {
                "description": "This API allows user can forgotPassword by sends a password reset link to the user's email address.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Request a password reset link",
                "parameters": [
                    {
                        "description": "Forgot Password Request body",
                        "name": "ForgotPasswordRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.ForgotPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.ForgotPasswordReponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found with this email",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/google-login": {
            "post": {
                "description": "This endpoint allows users to authenticate using their Google account. The frontend sends a Google ID Token, which is verified on the backend to create or authenticate the user.",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Google Login",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Google ID Token",
                        "name": "id_token",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success: Login successful with access token",
                        "schema": {
                            "$ref": "#/definitions/controllers.LoginReponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Invalid Google ID token",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden: User account is banned",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error: Failed to create or retrieve user",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Authenticates a user by username or email and returns an access token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "User Login",
                "parameters": [
                    {
                        "description": "Login request body",
                        "name": "loginRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "$ref": "#/definitions/controllers.LoginReponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Incorrect username or password",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden: Account is inactive",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "This API allows a user to log out by blacklisting their access and refresh tokens and clearing their authentication cookies.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Logout user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer \u003cJWT Token\u003e",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Logout successful",
                        "schema": {
                            "$ref": "#/definitions/controllers.LogoutResponse"
                        }
                    },
                    "400": {
                        "description": "No token provided or Refresh Token not provided",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Token has been revoked",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to reset cookies or other server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/refresh-token": {
            "post": {
                "description": "This API allows users to refresh their access token using a valid refresh token stored in cookies. If the refresh token is valid and not blacklisted, a new access token is generated.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Refresh access token",
                "responses": {
                    "200": {
                        "description": "New access token generated successfully",
                        "schema": {
                            "$ref": "#/definitions/controllers.RefreshResponse"
                        }
                    },
                    "401": {
                        "description": "Refresh token is missing, invalid, or blacklisted",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error while generating a new access token",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "This endpoint allows a new user to register by providing a username, password, email, and optional phone number,...",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "Register request body",
                        "name": "RegisterRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User registered successfully",
                        "schema": {
                            "$ref": "#/definitions/controllers.RegisterReponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid input",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict: Email, username, or phone already exists",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error: Database operation failed",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/reset-password": {
            "post": {
                "description": "This API allows users to reset their password using a valid reset token and a new password. The token is validated for authenticity and expiry before updating the password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Reset user password",
                "parameters": [
                    {
                        "description": "Reset Password Request body",
                        "name": "ResetRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.ResetRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.ResetReponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format or weak password",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid or expired reset token",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "controllers.ChangeMailRequest": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "description": "email mới cần cập nhật",
                    "type": "string"
                }
            }
        },
        "controllers.ChangeMailResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "controllers.ChangePasswordRequest": {
            "type": "object",
            "required": [
                "current_password",
                "new_password"
            ],
            "properties": {
                "current_password": {
                    "type": "string"
                },
                "new_password": {
                    "type": "string"
                }
            }
        },
        "controllers.ChangePasswordResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "controllers.CreateVIPPaymentReponse": {
            "type": "object",
            "properties": {
                "order_id": {
                    "type": "string"
                },
                "payment_url": {
                    "type": "string"
                }
            }
        },
        "controllers.CreateVIPPaymentRequest": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "vip_level": {
                    "type": "string"
                }
            }
        },
        "controllers.DeleteResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "controllers.ForgotPasswordReponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "controllers.ForgotPasswordRequest": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "controllers.GetPaymentHistoryResponse": {
            "type": "object",
            "properties": {
                "payment_history": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": true
                    }
                }
            }
        },
        "controllers.LoginReponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "controllers.LoginRequest": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "controllers.LogoutResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "controllers.QueryPaymentRequest": {
            "type": "object",
            "properties": {
                "lang": {
                    "type": "string"
                },
                "orderId": {
                    "type": "string"
                },
                "requestId": {
                    "type": "string"
                }
            }
        },
        "controllers.RefreshResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "controllers.RegisterReponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "controllers.RegisterRequest": {
            "type": "object",
            "required": [
                "email",
                "password",
                "username"
            ],
            "properties": {
                "email": {
                    "description": "unique",
                    "type": "string",
                    "example": "user@example.com"
                },
                "password": {
                    "type": "string",
                    "example": "hashed_password_here"
                },
                "profile": {
                    "description": "Nested personal info",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Profile"
                        }
                    ]
                },
                "username": {
                    "description": "unique",
                    "type": "string",
                    "example": "johndoe"
                }
            }
        },
        "controllers.ReponseQueryPaymentRequest": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "controllers.ResetReponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "controllers.ResetRequest": {
            "type": "object",
            "required": [
                "new_password",
                "token"
            ],
            "properties": {
                "new_password": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "controllers.UpdateUserProfileRequest": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string",
                    "example": "https://example.com/avatar.jpg"
                },
                "bio": {
                    "type": "string",
                    "example": "Software Engineer"
                },
                "dateOfBirth": {
                    "description": "Định dạng: YYYY-MM-DD",
                    "type": "string",
                    "example": "2000-01-01"
                },
                "name": {
                    "type": "string",
                    "example": "John Doe"
                },
                "phone": {
                    "type": "string",
                    "example": "+1234567890"
                },
                "username": {
                    "type": "string",
                    "example": "johndoe123"
                }
            }
        },
        "controllers.UpdateUserProfileResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "controllers.User": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "status": {
                    "type": "boolean"
                },
                "username": {
                    "type": "string"
                },
                "vip_level": {
                    "type": "string"
                }
            }
        },
        "github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "github_com_dath-241_coin-price-be-go_services_price-service_models.ResponseFundingRate": {
            "type": "object",
            "properties": {
                "adjustedFundingRateCap": {
                    "type": "string",
                    "example": "0.02000000"
                },
                "adjustedFundingRateFloor": {
                    "type": "string",
                    "example": "-0.02000000"
                },
                "eventTime": {
                    "type": "string",
                    "example": "2024-11-21 08:12:13"
                },
                "fundingCountDown": {
                    "type": "string",
                    "example": "06:47:47"
                },
                "fundingIntervalHours": {
                    "type": "integer",
                    "example": 8
                },
                "fundingRate": {
                    "type": "string",
                    "example": "0.00010000"
                },
                "symbol": {
                    "type": "string",
                    "example": "QTUMUSDT"
                }
            }
        },
        "github_com_dath-241_coin-price-be-go_services_trigger-service_models.ErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "An error occurred"
                }
            }
        },
        "models.Alert": {
            "type": "object",
            "properties": {
                "alert_id": {
                    "type": "string"
                },
                "condition": {
                    "description": "Condition for the alert, e.g., \"\u003e=\", \"\u003c=\", \"==\", \"in range\", \"out range\"",
                    "type": "string"
                },
                "created_at": {
                    "description": "Timestamp for when the alert was created",
                    "type": "integer"
                },
                "frequency": {
                    "description": "Frequency of notification, e.g., \"immediate\", \"daily\", \"weekly\"",
                    "type": "string"
                },
                "is_active": {
                    "description": "Whether the alert is active",
                    "type": "boolean"
                },
                "last_fundingrate_interval": {
                    "type": "string"
                },
                "market": {
                    "description": "Market for the alert, e.g., \"spot\" or \"future\"",
                    "type": "string"
                },
                "max_range": {
                    "type": "number"
                },
                "max_repeat_count": {
                    "description": "Số lần lặp lại tối đa",
                    "type": "integer"
                },
                "message": {
                    "description": "Thông điệp sẽ được gửi trong cảnh báo (ví dụ: \"BTC giá đã vượt $20,000\")",
                    "type": "string"
                },
                "min_range": {
                    "type": "number"
                },
                "next_trigger_time": {
                    "description": "Thời gian kích hoạt tiếp theo",
                    "type": "string"
                },
                "notification_method": {
                    "description": "How the user will be notified (email, push, Telegram)",
                    "type": "string"
                },
                "price": {
                    "description": "Price threshold for the alert, only applicable for price alerts",
                    "type": "number"
                },
                "range": {
                    "description": "Price range for alerts that check if price falls within or outside a range",
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "repeat_count": {
                    "description": "Số lần đã lặp lại",
                    "type": "integer"
                },
                "snooze_condition": {
                    "description": "Loại snooze",
                    "type": "string"
                },
                "symbol": {
                    "description": "Symbol for the alert, e.g., \"BTCUSDT\"",
                    "type": "string"
                },
                "symbols": {
                    "description": "List of symbols for symbol alerts",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "threshold": {
                    "description": "Threshold for the alert, only applicable for price alerts",
                    "type": "number"
                },
                "type": {
                    "description": "Type of symbol alert, e.g., \"new_listing\" or \"delisting\"",
                    "type": "string"
                },
                "updated_at": {
                    "description": "Timestamp for when the alert was last updated",
                    "type": "integer"
                },
                "user_id": {
                    "description": "ID của người dùng đặt cảnh báo",
                    "type": "string"
                }
            }
        },
        "models.ErrorResponseDataInternalServerError": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Internal server error"
                }
            }
        },
        "models.ErrorResponseDataMissing": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Invalid symbol or request parameters"
                }
            }
        },
        "models.ErrorResponseDataNotFound": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Symbol not found"
                }
            }
        },
        "models.ErrorResponseInputMissing": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Missing data"
                }
            }
        },
        "models.Indicator": {
            "type": "object",
            "required": [
                "indicator",
                "notification_method",
                "period",
                "symbol"
            ],
            "properties": {
                "id": {
                    "type": "string"
                },
                "indicator": {
                    "type": "string"
                },
                "notification_method": {
                    "type": "string"
                },
                "period": {
                    "type": "integer"
                },
                "symbol": {
                    "type": "string"
                }
            }
        },
        "models.KlineDataPoint": {
            "type": "object",
            "properties": {
                "close": {
                    "type": "number",
                    "example": 94645.7
                },
                "high": {
                    "type": "number",
                    "example": 95000
                },
                "low": {
                    "type": "number",
                    "example": 94200
                },
                "open": {
                    "type": "number",
                    "example": 94288
                },
                "time": {
                    "type": "string",
                    "example": "2024-11-21T00:00:00Z"
                },
                "volume": {
                    "type": "number",
                    "example": 21752.097
                }
            }
        },
        "models.MessageResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "models.Profile": {
            "type": "object",
            "properties": {
                "avatar_url": {
                    "type": "string",
                    "example": "https://example.com/avatar.png"
                },
                "bio": {
                    "type": "string",
                    "example": "Software developer based in NY"
                },
                "date_of_birth": {
                    "type": "string",
                    "example": "1995-05-15"
                },
                "full_name": {
                    "type": "string",
                    "example": "John Doe"
                },
                "phone_number": {
                    "description": "unique",
                    "type": "string",
                    "example": "+84911123456"
                }
            }
        },
        "models.ResponseAlertCheckerStatus": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string",
                    "example": "Alert checker started"
                }
            }
        },
        "models.ResponseAlertCreated": {
            "type": "object",
            "properties": {
                "alert_id": {
                    "type": "string",
                    "example": "647f1f77bcf86cd799439011"
                },
                "message": {
                    "type": "string",
                    "example": "Alert created successfully"
                }
            }
        },
        "models.ResponseAlertDeleted": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Alert deleted successfully"
                }
            }
        },
        "models.ResponseAlertDetail": {
            "type": "object",
            "properties": {
                "condition": {
                    "type": "string",
                    "example": "\u003e="
                },
                "createdAt": {
                    "type": "string",
                    "example": "2024-11-21T00:00:00Z"
                },
                "frequency": {
                    "type": "string",
                    "example": "immediate"
                },
                "id": {
                    "type": "string",
                    "example": "647f1f77bcf86cd799439011"
                },
                "isActive": {
                    "type": "boolean",
                    "example": true
                },
                "maxRepeatCount": {
                    "type": "integer",
                    "example": 5
                },
                "price": {
                    "type": "number",
                    "example": 50000
                },
                "range": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "snoozeCondition": {
                    "type": "string",
                    "example": "none"
                },
                "symbol": {
                    "type": "string",
                    "example": "BTCUSDT"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2024-11-21T00:00:00Z"
                }
            }
        },
        "models.ResponseAlertList": {
            "type": "object",
            "properties": {
                "alerts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.ResponseAlertDetail"
                    }
                }
            }
        },
        "models.ResponseFuturePrice": {
            "type": "object",
            "properties": {
                "eventTime": {
                    "type": "string"
                },
                "price": {
                    "type": "string"
                },
                "symbol": {
                    "type": "string"
                }
            }
        },
        "models.ResponseIndicatorCreated": {
            "type": "object",
            "properties": {
                "alert_id": {
                    "description": "ID của indicator alert vừa tạo",
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.ResponseKline": {
            "type": "object",
            "properties": {
                "eventTime": {
                    "type": "string",
                    "example": "2024-11-21 08:37:58"
                },
                "interval": {
                    "type": "string",
                    "example": "1m"
                },
                "kline_data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.KlineDataPoint"
                    }
                },
                "symbol": {
                    "type": "string",
                    "example": "BTCUSDT"
                }
            }
        },
        "models.ResponseNewDelistedSymbols": {
            "type": "object",
            "properties": {
                "delisted_symbols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[BNBUSDT]"
                    ]
                },
                "new_symbols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[BTCUSDT",
                        " ETHUSDT]"
                    ]
                }
            }
        },
        "models.ResponseNotificationSent": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string",
                    "example": "Notification sent"
                }
            }
        },
        "models.ResponseSetSymbolAlert": {
            "type": "object",
            "properties": {
                "alert_id": {
                    "type": "string",
                    "example": "647f1f77bcf86cd799439011"
                },
                "message": {
                    "type": "string",
                    "example": "Alert created successfully"
                }
            }
        },
        "models.ResponseSpotPrice": {
            "type": "object",
            "properties": {
                "eventTime": {
                    "type": "string"
                },
                "price": {
                    "type": "string"
                },
                "symbol": {
                    "type": "string"
                }
            }
        },
        "models.ResponseUserAlerts": {
            "type": "object",
            "properties": {
                "alerts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Alert"
                    }
                }
            }
        },
        "models.UserDTO": {
            "type": "object",
            "required": [
                "email",
                "username"
            ],
            "properties": {
                "created_at": {
                    "description": "Account creation time",
                    "type": "string",
                    "example": "2024-11-01T10:00:00Z"
                },
                "email": {
                    "description": "unique",
                    "type": "string",
                    "example": "user@example.com"
                },
                "id": {
                    "description": "MongoDB ID",
                    "type": "string",
                    "example": "648fd7ef2cbae153e4b5c7df"
                },
                "is_active": {
                    "description": "Account status",
                    "type": "boolean"
                },
                "profile": {
                    "description": "Nested personal info",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Profile"
                        }
                    ]
                },
                "role": {
                    "description": "e.g., VIP-0, VIP-1, Admin",
                    "type": "string",
                    "example": "VIP-0"
                },
                "updated_at": {
                    "description": "Last update time",
                    "type": "string",
                    "example": "2024-11-01T10:00:00Z"
                },
                "username": {
                    "description": "unique",
                    "type": "string",
                    "example": "johndoe"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Coin-Price",
	Description:      "This is a sample server.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
