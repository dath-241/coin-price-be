definitions:
  controllers.ChangeMailRequest:
    properties:
      email:
        description: email mới cần cập nhật
        type: string
    required:
    - email
    type: object
  controllers.ChangeMailResponse:
    properties:
      message:
        type: string
    type: object
  controllers.ChangePasswordRequest:
    properties:
      current_password:
        type: string
      new_password:
        type: string
    required:
    - current_password
    - new_password
    type: object
  controllers.ChangePasswordResponse:
    properties:
      message:
        type: string
    type: object
  controllers.CreateVIPPaymentReponse:
    properties:
      order_id:
        type: string
      payment_url:
        type: string
    type: object
  controllers.CreateVIPPaymentRequest:
    properties:
      amount:
        type: integer
      vip_level:
        type: string
    type: object
  controllers.DeleteResponse:
    properties:
      message:
        type: string
    type: object
  controllers.ForgotPasswordReponse:
    properties:
      message:
        type: string
    type: object
  controllers.ForgotPasswordRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  controllers.GetPaymentHistoryResponse:
    properties:
      payment_history:
        items:
          additionalProperties: true
          type: object
        type: array
    type: object
  controllers.LoginReponse:
    properties:
      message:
        type: string
      token:
        type: string
    type: object
  controllers.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  controllers.LogoutResponse:
    properties:
      message:
        type: string
    type: object
  controllers.QueryPaymentRequest:
    properties:
      lang:
        type: string
      orderId:
        type: string
      requestId:
        type: string
    type: object
  controllers.RefreshResponse:
    properties:
      message:
        type: string
      token:
        type: string
    type: object
  controllers.RegisterReponse:
    properties:
      message:
        type: string
    type: object
  controllers.RegisterRequest:
    properties:
      email:
        description: unique
        example: user@example.com
        type: string
      password:
        example: hashed_password_here
        type: string
      profile:
        allOf:
        - $ref: '#/definitions/models.Profile'
        description: Nested personal info
      username:
        description: unique
        example: johndoe
        type: string
    required:
    - email
    - password
    - username
    type: object
  controllers.ReponseQueryPaymentRequest:
    properties:
      message:
        type: string
      status:
        type: string
    type: object
  controllers.ResetReponse:
    properties:
      message:
        type: string
    type: object
  controllers.ResetRequest:
    properties:
      new_password:
        type: string
      token:
        type: string
    required:
    - new_password
    - token
    type: object
  controllers.UpdateUserProfileRequest:
    properties:
      avatar:
        example: https://example.com/avatar.jpg
        type: string
      bio:
        example: Software Engineer
        type: string
      dateOfBirth:
        description: 'Định dạng: YYYY-MM-DD'
        example: "2000-01-01"
        type: string
      name:
        example: John Doe
        type: string
      phone:
        example: "+1234567890"
        type: string
      username:
        example: johndoe123
        type: string
    type: object
  controllers.UpdateUserProfileResponse:
    properties:
      message:
        type: string
    type: object
  controllers.User:
    properties:
      email:
        type: string
      id:
        type: string
      status:
        type: boolean
      username:
        type: string
      vip_level:
        type: string
    type: object
  github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  github_com_dath-241_coin-price-be-go_services_price-service_models.ResponseFundingRate:
    properties:
      adjustedFundingRateCap:
        example: "0.02000000"
        type: string
      adjustedFundingRateFloor:
        example: "-0.02000000"
        type: string
      eventTime:
        example: "2024-11-21 08:12:13"
        type: string
      fundingCountDown:
        example: "06:47:47"
        type: string
      fundingIntervalHours:
        example: 8
        type: integer
      fundingRate:
        example: "0.00010000"
        type: string
      symbol:
        example: QTUMUSDT
        type: string
    type: object
  github_com_dath-241_coin-price-be-go_services_trigger-service_models.ErrorResponse:
    properties:
      message:
        example: An error occurred
        type: string
    type: object
  models.Alert:
    properties:
      alert_id:
        type: string
      condition:
        description: Condition for the alert, e.g., ">=", "<=", "==", "in range",
          "out range"
        type: string
      created_at:
        description: Timestamp for when the alert was created
        type: integer
      frequency:
        description: Frequency of notification, e.g., "immediate", "daily", "weekly"
        type: string
      is_active:
        description: Whether the alert is active
        type: boolean
      last_fundingrate_interval:
        type: string
      market:
        description: Market for the alert, e.g., "spot" or "future"
        type: string
      max_range:
        type: number
      max_repeat_count:
        description: Số lần lặp lại tối đa
        type: integer
      message:
        description: 'Thông điệp sẽ được gửi trong cảnh báo (ví dụ: "BTC giá đã vượt
          $20,000")'
        type: string
      min_range:
        type: number
      next_trigger_time:
        description: Thời gian kích hoạt tiếp theo
        type: string
      notification_method:
        description: How the user will be notified (email, push, Telegram)
        type: string
      price:
        description: Price threshold for the alert, only applicable for price alerts
        type: number
      range:
        description: Price range for alerts that check if price falls within or outside
          a range
        items:
          type: number
        type: array
      repeat_count:
        description: Số lần đã lặp lại
        type: integer
      snooze_condition:
        description: Loại snooze
        type: string
      symbol:
        description: Symbol for the alert, e.g., "BTCUSDT"
        type: string
      symbols:
        description: List of symbols for symbol alerts
        items:
          type: string
        type: array
      threshold:
        description: Threshold for the alert, only applicable for price alerts
        type: number
      type:
        description: Type of symbol alert, e.g., "new_listing" or "delisting"
        type: string
      updated_at:
        description: Timestamp for when the alert was last updated
        type: integer
      user_id:
        description: ID của người dùng đặt cảnh báo
        type: string
    type: object
  models.ErrorResponseDataInternalServerError:
    properties:
      message:
        example: Internal server error
        type: string
    type: object
  models.ErrorResponseDataMissing:
    properties:
      message:
        example: Invalid symbol or request parameters
        type: string
    type: object
  models.ErrorResponseDataNotFound:
    properties:
      message:
        example: Symbol not found
        type: string
    type: object
  models.ErrorResponseInputMissing:
    properties:
      message:
        example: Missing data
        type: string
    type: object
  models.Indicator:
    properties:
      id:
        type: string
      indicator:
        type: string
      notification_method:
        type: string
      period:
        type: integer
      symbol:
        type: string
    required:
    - indicator
    - notification_method
    - period
    - symbol
    type: object
  models.KlineDataPoint:
    properties:
      close:
        example: 94645.7
        type: number
      high:
        example: 95000
        type: number
      low:
        example: 94200
        type: number
      open:
        example: 94288
        type: number
      time:
        example: "2024-11-21T00:00:00Z"
        type: string
      volume:
        example: 21752.097
        type: number
    type: object
  models.MessageResponse:
    properties:
      message:
        type: string
    type: object
  models.Profile:
    properties:
      avatar_url:
        example: https://example.com/avatar.png
        type: string
      bio:
        example: Software developer based in NY
        type: string
      date_of_birth:
        example: "1995-05-15"
        type: string
      full_name:
        example: John Doe
        type: string
      phone_number:
        description: unique
        example: "+84911123456"
        type: string
    type: object
  models.ResponseAlertCheckerStatus:
    properties:
      status:
        example: Alert checker started
        type: string
    type: object
  models.ResponseAlertCreated:
    properties:
      alert_id:
        example: 647f1f77bcf86cd799439011
        type: string
      message:
        example: Alert created successfully
        type: string
    type: object
  models.ResponseAlertDeleted:
    properties:
      message:
        example: Alert deleted successfully
        type: string
    type: object
  models.ResponseAlertDetail:
    properties:
      condition:
        example: '>='
        type: string
      createdAt:
        example: "2024-11-21T00:00:00Z"
        type: string
      frequency:
        example: immediate
        type: string
      id:
        example: 647f1f77bcf86cd799439011
        type: string
      isActive:
        example: true
        type: boolean
      maxRepeatCount:
        example: 5
        type: integer
      price:
        example: 50000
        type: number
      range:
        items:
          type: number
        type: array
      snoozeCondition:
        example: none
        type: string
      symbol:
        example: BTCUSDT
        type: string
      updatedAt:
        example: "2024-11-21T00:00:00Z"
        type: string
    type: object
  models.ResponseAlertList:
    properties:
      alerts:
        items:
          $ref: '#/definitions/models.ResponseAlertDetail'
        type: array
    type: object
  models.ResponseFuturePrice:
    properties:
      eventTime:
        type: string
      price:
        type: string
      symbol:
        type: string
    type: object
  models.ResponseIndicatorCreated:
    properties:
      alert_id:
        description: ID của indicator alert vừa tạo
        type: string
      message:
        type: string
    type: object
  models.ResponseKline:
    properties:
      eventTime:
        example: "2024-11-21 08:37:58"
        type: string
      interval:
        example: 1m
        type: string
      kline_data:
        items:
          $ref: '#/definitions/models.KlineDataPoint'
        type: array
      symbol:
        example: BTCUSDT
        type: string
    type: object
  models.ResponseNewDelistedSymbols:
    properties:
      delisted_symbols:
        example:
        - '[BNBUSDT]'
        items:
          type: string
        type: array
      new_symbols:
        example:
        - '[BTCUSDT'
        - ' ETHUSDT]'
        items:
          type: string
        type: array
    type: object
  models.ResponseNotificationSent:
    properties:
      status:
        example: Notification sent
        type: string
    type: object
  models.ResponseSetSymbolAlert:
    properties:
      alert_id:
        example: 647f1f77bcf86cd799439011
        type: string
      message:
        example: Alert created successfully
        type: string
    type: object
  models.ResponseSpotPrice:
    properties:
      eventTime:
        type: string
      price:
        type: string
      symbol:
        type: string
    type: object
  models.ResponseUserAlerts:
    properties:
      alerts:
        items:
          $ref: '#/definitions/models.Alert'
        type: array
    type: object
  models.UserDTO:
    properties:
      created_at:
        description: Account creation time
        example: "2024-11-01T10:00:00Z"
        type: string
      email:
        description: unique
        example: user@example.com
        type: string
      id:
        description: MongoDB ID
        example: 648fd7ef2cbae153e4b5c7df
        type: string
      is_active:
        description: Account status
        type: boolean
      profile:
        allOf:
        - $ref: '#/definitions/models.Profile'
        description: Nested personal info
      role:
        description: e.g., VIP-0, VIP-1, Admin
        example: VIP-0
        type: string
      updated_at:
        description: Last update time
        example: "2024-11-01T10:00:00Z"
        type: string
      username:
        description: unique
        example: johndoe
        type: string
    required:
    - email
    - username
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Coin-Price
  version: "1.0"
paths:
  /api/v1/admin/payment-history:
    get:
      consumes:
      - application/json
      description: Retrieves the payment history for all users. Admin can view all
        payments made by users.
      parameters:
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of all payment histories
          schema:
            $ref: '#/definitions/controllers.GetPaymentHistoryResponse'
        "500":
          description: Internal server error while fetching payment history
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse'
      summary: Get payment history for all users (admin only)
      tags:
      - Admin
  /api/v1/admin/payment-history/{user_id}:
    get:
      consumes:
      - application/json
      description: Retrieves the payment history of a specific user based on the provided
        user ID. This endpoint is restricted to admin access only and returns a list
        of payment transactions associated with the user.
      parameters:
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of payment transactions for the user
          schema:
            $ref: '#/definitions/controllers.GetPaymentHistoryResponse'
        "400":
          description: Invalid user ID or missing parameters
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse'
        "404":
          description: No payment history found for this user
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse'
        "500":
          description: Internal server error during payment history retrieval
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse'
      summary: Retrieve payment history for a specific user (admin access only)
      tags:
      - Admin
  /api/v1/admin/user/{user_id}:
    delete:
      consumes:
      - application/json
      description: Admin can delete a user from the system by providing the user ID.
        The user will be permanently removed from the database.
      parameters:
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            $ref: '#/definitions/models.MessageResponse'
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse'
        "500":
          description: Internal server error while deleting user
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse'
      summary: Delete a user by admin
      tags:
      - Admin
    get:
      consumes:
      - application/json
      description: Admin can retrieve user details by providing the user ID. Returns
        user information such as username, email, VIP level, etc.
      parameters:
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User details successfully fetched
          schema:
            $ref: '#/definitions/models.UserDTO'
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse'
        "500":
          description: Internal server error while fetching user
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse'
      summary: Get user details by admin
      tags:
      - Admin
  /api/v1/admin/user/{user_id}/active:
    put:
      consumes:
      - application/json
      description: Activate a user account by setting the account status to active.
        Admin can use this to activate a banned account.
      parameters:
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Account activated successfully
          schema:
            $ref: '#/definitions/models.MessageResponse'
        "400":
          description: Invalid user ID or missing user ID
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse'
        "500":
          description: Internal server error while activating account
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse'
      summary: Activate a user account
      tags:
      - Admin
  /api/v1/admin/user/{user_id}/ban:
    put:
      consumes:
      - application/json
      description: Ban a user account by setting the account status to inactive. Admin
        can use this to ban a user account.
      parameters:
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Account banned successfully
          schema:
            $ref: '#/definitions/models.MessageResponse'
        "400":
          description: Invalid user ID or missing user ID
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse'
        "500":
          description: Internal server error while banning account
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse'
      summary: Ban a user account
      tags:
      - Admin
  /api/v1/admin/users:
    get:
      consumes:
      - application/json
      description: Admin can retrieve a list of all users in the system. Returns basic
        information about each user.
      parameters:
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of users successfully fetched
          schema:
            items:
              $ref: '#/definitions/controllers.User'
            type: array
        "500":
          description: Internal server error while fetching users
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse'
      summary: Get all users
      tags:
      - Admin
  /api/v1/funding-rate:
    get:
      consumes:
      - application/json
      description: Retrieves current funding rate information for a specified trading
        pair from Binance Futures
      parameters:
      - description: Trading pair symbol (e.g., QTUMUSDT)
        example: '"QTUMUSDT"'
        in: query
        name: symbol
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful response with funding rate data
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_price-service_models.ResponseFundingRate'
        "400":
          description: Invalid symbol or request parameters
          schema:
            $ref: '#/definitions/models.ErrorResponseDataMissing'
        "404":
          description: Symbol not found
          schema:
            $ref: '#/definitions/models.ErrorResponseDataNotFound'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponseDataInternalServerError'
      summary: Get real-time funding rate data
      tags:
      - Funding Rate
  /api/v1/future-price:
    get:
      description: Retrieves current future price information for a specified trading
        pair from Binance Futures
      parameters:
      - description: Trading pair symbol (e.g., BTCUSDT)
        example: '"BTCUSDT"'
        in: query
        name: symbol
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful response with funding rate data
          schema:
            $ref: '#/definitions/models.ResponseFuturePrice'
        "400":
          description: Invalid symbol or request parameters
          schema:
            $ref: '#/definitions/models.ErrorResponseDataMissing'
        "404":
          description: Symbol not found
          schema:
            $ref: '#/definitions/models.ErrorResponseDataNotFound'
        "500":
          description: Failed to fetch price
          schema:
            $ref: '#/definitions/models.ErrorResponseDataInternalServerError'
      summary: Get real-time future price data
      tags:
      - Future price
  /api/v1/payment/momo-callback:
    post:
      consumes:
      - application/json
      description: Handles callback from MoMo after payment is made
      parameters:
      - description: MoMo Callback Data
        in: body
        name: callbackData
        required: true
        schema:
          additionalProperties: true
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: MoMo callback success response
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse'
        "400":
          description: Invalid JSON payload
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse'
        "401":
          description: Invalid signature
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse'
      summary: MoMo Payment Callback
      tags:
      - Payment
  /api/v1/payment/status:
    post:
      consumes:
      - application/json
      description: Queries the payment status and upgrades the user's VIP level if
        the payment is successful based on the order details
      parameters:
      - description: Order ID from the payment gateway
        in: body
        name: statusRequest
        required: true
        schema:
          $ref: '#/definitions/controllers.QueryPaymentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Payment confirmed and VIP level upgraded
          schema:
            $ref: '#/definitions/controllers.ReponseQueryPaymentRequest'
        "400":
          description: Invalid order ID or missing parameters
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse'
        "404":
          description: Order not found
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse'
        "500":
          description: Internal server error during payment confirmation
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse'
      summary: Check payment status and upgrade user's VIP level if successful
      tags:
      - Payment
  /api/v1/payment/vip-upgrade:
    post:
      consumes:
      - application/json
      description: Creates a MoMo payment request for upgrading the user's VIP level,
        validates the token, and stores the order details in the database
      parameters:
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Payment request data
        in: body
        name: paymentRequest
        required: true
        schema:
          $ref: '#/definitions/controllers.CreateVIPPaymentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Payment URL and Order ID
          schema:
            $ref: '#/definitions/controllers.CreateVIPPaymentReponse'
        "400":
          description: Invalid request data or missing parameters
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse'
        "401":
          description: 'Unauthorized: Invalid or missing authorization token'
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse'
        "500":
          description: Internal server error during payment creation
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse'
      summary: Initiate MoMo payment for VIP upgrade
      tags:
      - Payment
  /api/v1/spot-price:
    get:
      description: Retrieves current spot price information for a specified trading
        pair from Binance Spot
      parameters:
      - description: Trading pair symbol (e.g., BTCUSDT)
        example: '"BTCUSDT"'
        in: query
        name: symbol
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful response with spot price data
          schema:
            $ref: '#/definitions/models.ResponseSpotPrice'
        "400":
          description: Invalid symbol or request parameters
          schema:
            $ref: '#/definitions/models.ErrorResponseDataMissing'
        "404":
          description: Symbol not found
          schema:
            $ref: '#/definitions/models.ErrorResponseDataNotFound'
        "500":
          description: Failed to fetch price
          schema:
            $ref: '#/definitions/models.ErrorResponseDataInternalServerError'
      summary: Get real-time spot price data
      tags:
      - Spot price
  /api/v1/user/me:
    delete:
      consumes:
      - application/json
      description: This endpoint allows the user to Delete the account of the currently
        authenticated user based on the access token.
      parameters:
      - description: Bearer token
        format: '"Bearer {token}"'
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.DeleteResponse'
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse'
        "401":
          description: Unauthorized or token is invalid
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse'
        "500":
          description: Failed to delete user
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse'
      summary: Delete current user account
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: This endpoint fetches details of the currently authenticated user
        using the JWT token provided in the Authorization header.
      parameters:
      - description: Bearer <JWT Token>
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'Success: Returns the user''s details'
          schema:
            $ref: '#/definitions/models.UserDTO'
        "400":
          description: 'Bad Request: Invalid user ID'
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse'
        "401":
          description: 'Unauthorized: invalid token'
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse'
        "404":
          description: 'Not Found: User not found'
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse'
        "500":
          description: 'Internal Server Error: Failed to fetch user'
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Retrieve current user information
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: This endpoint allows the user to update their profile information
        such as name, username, phone, avatar, bio, and date of birth.
      parameters:
      - description: Bearer token
        format: '"Bearer {token}"'
        in: header
        name: Authorization
        required: true
        type: string
      - description: Update UserProfile Request body
        in: body
        name: UpdateUserProfileRequest
        required: true
        schema:
          $ref: '#/definitions/controllers.UpdateUserProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.UpdateUserProfileResponse'
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse'
        "401":
          description: 'Unauthorized: Authorization header required or invalid token'
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse'
        "404":
          description: 'Not Found: User not found'
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse'
        "500":
          description: 'Internal Server Error: Failed to update user'
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update current user profile
      tags:
      - Users
  /api/v1/user/me/change_email:
    put:
      consumes:
      - application/json
      description: This endpoint allows an authenticated user to change their email
        address.
      parameters:
      - description: Bearer token
        format: '"Bearer {token}"'
        in: header
        name: Authorization
        required: true
        type: string
      - description: Change Mail Request body
        in: body
        name: ChangeMailRequest
        required: true
        schema:
          $ref: '#/definitions/controllers.ChangeMailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.ChangeMailResponse'
        "400":
          description: Invalid email format
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse'
        "401":
          description: Unauthorized or token is invalid
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse'
        "409":
          description: Email already exists
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse'
      summary: Change user email
      tags:
      - Users
  /api/v1/user/me/change_password:
    put:
      consumes:
      - application/json
      description: This endpoint allows an authenticated user to change their password
        by providing the current and new passwords.
      parameters:
      - description: Bearer token
        format: '"Bearer {token}"'
        in: header
        name: Authorization
        required: true
        type: string
      - description: Change Password Request body
        in: body
        name: ChangePasswordRequest
        required: true
        schema:
          $ref: '#/definitions/controllers.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.ChangePasswordResponse'
        "400":
          description: 'Bad Request: Password must contain at least 8 characters,
            including letters, numbers, and special characters.'
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse'
        "401":
          description: 'Unauthorized: Current password is incorrect'
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse'
        "404":
          description: 'Not Found: User not found'
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Change user password
      tags:
      - Users
  /api/v1/user/me/payment-history:
    get:
      consumes:
      - application/json
      description: This endpoint returns the payment history of the currently authenticated
        user using their JWT token.
      parameters:
      - description: Bearer <JWT Token>
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'Success: Returns the user''s payment history'
          schema:
            items:
              additionalProperties: true
              type: object
            type: array
        "401":
          description: 'Unauthorized: Invalid or missing token'
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse'
        "500":
          description: 'Internal Server Error: Failed to fetch payment history'
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Retrieve payment history
      tags:
      - Users
  /api/v1/users/{id}/alerts:
    get:
      consumes:
      - application/json
      description: Retrieve all alerts for a user by their ID
      parameters:
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of user alerts
          schema:
            $ref: '#/definitions/models.ResponseUserAlerts'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_trigger-service_models.ErrorResponse'
        "500":
          description: Failed to retrieve alerts
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_trigger-service_models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get user alerts
      tags:
      - Users
  /api/v1/users/{id}/alerts/notify:
    post:
      consumes:
      - application/json
      description: Send a notification email to the user for their alerts
      parameters:
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Notification sent successfully
          schema:
            $ref: '#/definitions/models.ResponseNotificationSent'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_trigger-service_models.ErrorResponse'
        "500":
          description: Failed to send notification
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_trigger-service_models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Notify user of alerts
      tags:
      - Users
  /api/v1/vip1/kline:
    get:
      description: Fetches Kline data for a specific symbol and interval from Binance
        API
      parameters:
      - description: Symbol for which to fetch Kline data (e.g., BTCUSDT)
        in: query
        name: symbol
        required: true
        type: string
      - description: Interval for Kline data (e.g., 1m, 5m, 1h, 1d)
        in: query
        name: interval
        required: true
        type: string
      responses:
        "200":
          description: Successful response with Kline data
          schema:
            $ref: '#/definitions/models.ResponseKline'
        "400":
          description: Missing Data
          schema:
            $ref: '#/definitions/models.ErrorResponseInputMissing'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponseDataInternalServerError'
      summary: Get Kline data
      tags:
      - Kline
  /api/v1/vip2/alerts:
    get:
      consumes:
      - application/json
      description: Retrieve all alerts, optionally filter by type
      parameters:
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Filter by alert type (e.g., new_listing, delisting)
        in: query
        name: type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of alerts
          schema:
            items:
              $ref: '#/definitions/models.ResponseAlertList'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_trigger-service_models.ErrorResponse'
        "500":
          description: Failed to retrieve alerts
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_trigger-service_models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get all alerts
      tags:
      - Alerts
    post:
      consumes:
      - application/json
      description: Create a new alert with the given details
      parameters:
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Alert details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.Alert'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created alert
          schema:
            $ref: '#/definitions/models.ResponseAlertCreated'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_trigger-service_models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_trigger-service_models.ErrorResponse'
        "500":
          description: Failed to create alert
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_trigger-service_models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create an alert
      tags:
      - Alerts
  /api/v1/vip2/alerts/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an alert by its unique identifier
      parameters:
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Alert ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Alert deleted successfully
          schema:
            $ref: '#/definitions/models.ResponseAlertDeleted'
        "400":
          description: Invalid alert ID
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_trigger-service_models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_trigger-service_models.ErrorResponse'
        "404":
          description: Alert not found
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_trigger-service_models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete an alert
      tags:
      - Alerts
    get:
      consumes:
      - application/json
      description: Retrieve an alert by its unique identifier
      parameters:
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Alert ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Alert details
          schema:
            $ref: '#/definitions/models.ResponseAlertDetail'
        "400":
          description: Invalid alert ID
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_trigger-service_models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_trigger-service_models.ErrorResponse'
        "404":
          description: Alert not found
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_trigger-service_models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get an alert by ID
      tags:
      - Alerts
  /api/v1/vip2/alerts/symbol:
    post:
      consumes:
      - application/json
      description: Set a new alert for symbols that are newly listed or delisted
      parameters:
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Alert details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.Alert'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created alert for symbol
          schema:
            $ref: '#/definitions/models.ResponseSetSymbolAlert'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_trigger-service_models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_trigger-service_models.ErrorResponse'
        "500":
          description: Failed to create alert for symbol
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_trigger-service_models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Set an alert for new or delisted symbols
      tags:
      - Alerts
  /api/v1/vip2/start-alert-checker:
    post:
      consumes:
      - application/json
      description: Starts the alert checker to monitor for alerts
      produces:
      - application/json
      responses:
        "200":
          description: Alert checker started successfully
          schema:
            $ref: '#/definitions/models.ResponseAlertCheckerStatus'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_trigger-service_models.ErrorResponse'
      summary: Start alert checker
      tags:
      - Alert Running
  /api/v1/vip2/stop-alert-checker:
    post:
      consumes:
      - application/json
      description: Stops the alert checker from monitoring for alerts
      produces:
      - application/json
      responses:
        "200":
          description: Alert checker stopped successfully
          schema:
            $ref: '#/definitions/models.ResponseAlertCheckerStatus'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_trigger-service_models.ErrorResponse'
      summary: Stop alert checker
      tags:
      - Alert Running
  /api/v1/vip2/symbols-alerts:
    get:
      consumes:
      - application/json
      description: Retrieve new and delisted symbols from Binance
      parameters:
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of new and delisted symbols
          schema:
            $ref: '#/definitions/models.ResponseNewDelistedSymbols'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_trigger-service_models.ErrorResponse'
        "500":
          description: Failed to retrieve symbols
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_trigger-service_models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get new and delisted symbols
      tags:
      - Alerts
  /api/v1/vip3/indicators:
    post:
      consumes:
      - application/json
      description: Create an alert with the given indicator type and settings
      parameters:
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Indicator alert details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.Indicator'
      produces:
      - application/json
      responses:
        "201":
          description: Indicator alert created successfully
          schema:
            $ref: '#/definitions/models.ResponseIndicatorCreated'
        "400":
          description: Invalid request body or invalid indicator type
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_trigger-service_models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_trigger-service_models.ErrorResponse'
        "500":
          description: Failed to create indicator alert
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_trigger-service_models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create an advanced indicator alert
      tags:
      - Indicators
  /auth/forgot-password:
    post:
      consumes:
      - application/json
      description: This API allows user can forgotPassword by sends a password reset
        link to the user's email address.
      parameters:
      - description: Forgot Password Request body
        in: body
        name: ForgotPasswordRequest
        required: true
        schema:
          $ref: '#/definitions/controllers.ForgotPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.ForgotPasswordReponse'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse'
        "404":
          description: User not found with this email
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse'
      summary: Request a password reset link
      tags:
      - Authentication
  /auth/google-login:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: This endpoint allows users to authenticate using their Google account.
        The frontend sends a Google ID Token, which is verified on the backend to
        create or authenticate the user.
      parameters:
      - description: Google ID Token
        in: formData
        name: id_token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'Success: Login successful with access token'
          schema:
            $ref: '#/definitions/controllers.LoginReponse'
        "401":
          description: 'Unauthorized: Invalid Google ID token'
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse'
        "403":
          description: 'Forbidden: User account is banned'
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse'
        "500":
          description: 'Internal Server Error: Failed to create or retrieve user'
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse'
      summary: Google Login
      tags:
      - Authentication
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user by username or email and returns an access
        token
      parameters:
      - description: Login request body
        in: body
        name: loginRequest
        required: true
        schema:
          $ref: '#/definitions/controllers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            $ref: '#/definitions/controllers.LoginReponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse'
        "401":
          description: 'Unauthorized: Incorrect username or password'
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse'
        "403":
          description: 'Forbidden: Account is inactive'
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse'
      summary: User Login
      tags:
      - Authentication
  /auth/logout:
    post:
      consumes:
      - application/json
      description: This API allows a user to log out by blacklisting their access
        and refresh tokens and clearing their authentication cookies.
      parameters:
      - description: Bearer <JWT Token>
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Logout successful
          schema:
            $ref: '#/definitions/controllers.LogoutResponse'
        "400":
          description: No token provided or Refresh Token not provided
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse'
        "401":
          description: Token has been revoked
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse'
        "500":
          description: Failed to reset cookies or other server error
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse'
      security:
      - Bearer: []
      summary: Logout user
      tags:
      - Authentication
  /auth/refresh-token:
    post:
      consumes:
      - application/json
      description: This API allows users to refresh their access token using a valid
        refresh token stored in cookies. If the refresh token is valid and not blacklisted,
        a new access token is generated.
      produces:
      - application/json
      responses:
        "200":
          description: New access token generated successfully
          schema:
            $ref: '#/definitions/controllers.RefreshResponse'
        "401":
          description: Refresh token is missing, invalid, or blacklisted
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse'
        "500":
          description: Internal server error while generating a new access token
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse'
      summary: Refresh access token
      tags:
      - Authentication
  /auth/register:
    post:
      consumes:
      - application/json
      description: This endpoint allows a new user to register by providing a username,
        password, email, and optional phone number,...
      parameters:
      - description: Register request body
        in: body
        name: RegisterRequest
        required: true
        schema:
          $ref: '#/definitions/controllers.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            $ref: '#/definitions/controllers.RegisterReponse'
        "400":
          description: 'Bad Request: Invalid input'
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse'
        "409":
          description: 'Conflict: Email, username, or phone already exists'
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse'
        "500":
          description: 'Internal Server Error: Database operation failed'
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse'
      summary: Register a new user
      tags:
      - Authentication
  /auth/reset-password:
    post:
      consumes:
      - application/json
      description: This API allows users to reset their password using a valid reset
        token and a new password. The token is validated for authenticity and expiry
        before updating the password.
      parameters:
      - description: Reset Password Request body
        in: body
        name: ResetRequest
        required: true
        schema:
          $ref: '#/definitions/controllers.ResetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.ResetReponse'
        "400":
          description: Invalid request format or weak password
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse'
        "401":
          description: Invalid or expired reset token
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/github_com_dath-241_coin-price-be-go_services_admin_service_models.ErrorResponse'
      summary: Reset user password
      tags:
      - Authentication
swagger: "2.0"
